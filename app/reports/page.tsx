"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { SidebarTrigger } from "@/components/ui/sidebar"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { DatePickerWithRange } from "@/components/date-range-picker"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, PieChart, Pie, Cell } from "recharts"
import { Download, TrendingUp, DollarSign, Package, Calendar, FileText } from "lucide-react"

const profitData = [
  {
    product: "Wireless Headphones",
    soldQty: 234,
    salePrice: 149.99,
    avgPurchaseCost: 75.5,
    totalCost: 17667,
    grossProfit: 17430.66,
    margin: "49.7%",
  },
  {
    product: "Smart Watch",
    soldQty: 189,
    salePrice: 189.99,
    avgPurchaseCost: 118.75,
    totalCost: 22443.75,
    grossProfit: 13465.36,
    margin: "37.5%",
  },
  {
    product: "Phone Case",
    soldQty: 456,
    salePrice: 15.33,
    avgPurchaseCost: 14.25,
    totalCost: 6498,
    grossProfit: 492.48,
    margin: "7.0%",
  },
  {
    product: "Bluetooth Speaker",
    soldQty: 123,
    salePrice: 89.99,
    avgPurchaseCost: 85.0,
    totalCost: 10455,
    grossProfit: 613.77,
    margin: "5.5%",
  },
]

const monthlyData = [
  { month: "Jan", revenue: 45000, cost: 32000, profit: 13000 },
  { month: "Feb", revenue: 52000, cost: 36400, profit: 15600 },
  { month: "Mar", revenue: 48000, cost: 33600, profit: 14400 },
  { month: "Apr", revenue: 61000, cost: 42700, profit: 18300 },
  { month: "May", revenue: 55000, cost: 38500, profit: 16500 },
  { month: "Jun", revenue: 67000, cost: 46900, profit: 20100 },
]

const storePerformance = [
  { name: "Store A", value: 45, color: "#0088FE" },
  { name: "Store B", value: 35, color: "#00C49F" },
  { name: "Store C", value: 20, color: "#FFBB28" },
]

const poMappingData = [
  {
    product: "Product A",
    soldQty: 12,
    salePrice: 50.0,
    poBreakdown: [
      { poId: "PO-2024-001", qty: 10, unitCost: 15.0, total: 150.0 },
      { poId: "PO-2024-002", qty: 2, unitCost: 13.0, total: 26.0 },
    ],
    totalCost: 176.0,
    revenue: 600.0,
    profit: 424.0,
  },
  {
    product: "Wireless Headphones",
    soldQty: 25,
    salePrice: 149.99,
    poBreakdown: [{ poId: "PO-2024-001", qty: 25, unitCost: 75.0, total: 1875.0 }],
    totalCost: 1875.0,
    revenue: 3749.75,
    profit: 1874.75,
  },
  {
    product: "Smart Watch",
    soldQty: 8,
    salePrice: 189.99,
    poBreakdown: [{ poId: "PO-2024-001", qty: 8, unitCost: 120.0, total: 960.0 }],
    totalCost: 960.0,
    revenue: 1519.92,
    profit: 559.92,
  },
]

export default function Reports() {
  const [reportType, setReportType] = useState("profit")
  const [dateRange, setDateRange] = useState<any>(null)

  const handleGenerateReport = () => {
    console.log("Generating report with type:", reportType)
    alert(`${reportType.charAt(0).toUpperCase() + reportType.slice(1)} report generated successfully!`)
  }

  const handleExportPDF = () => {
    // Create a simple text content for PDF simulation
    const reportContent = `
PROFIT ANALYSIS REPORT
Generated: ${new Date().toLocaleDateString()}
Report Type: ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}

SUMMARY METRICS:
- Total Revenue: $328,000
- Total Cost: $226,600  
- Gross Profit: $101,400
- Average Margin: 24.9%

${
  reportType === "profit"
    ? `
PRODUCT PROFIT BREAKDOWN:
${profitData
  .map(
    (item) => `
${item.product}:
- Sold Quantity: ${item.soldQty}
- Sale Price: $${item.salePrice}
- Average Cost: $${item.avgPurchaseCost}
- Gross Profit: $${item.grossProfit.toLocaleString()}
- Margin: ${item.margin}
`,
  )
  .join("")}
`
    : ""
}

Report generated by Warehouse Management System
  `.trim()

    const blob = new Blob([reportContent], { type: "text/plain;charset=utf-8;" })
    const link = document.createElement("a")
    const url = URL.createObjectURL(blob)
    link.setAttribute("href", url)
    link.setAttribute("download", `profit_report_${reportType}_${new Date().toISOString().split("T")[0]}.txt`)
    link.style.visibility = "hidden"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const handleExportCSV = () => {
    let csvContent = []

    if (reportType === "profit") {
      csvContent = [
        ["Product", "Sold Qty", "Sale Price", "Avg Purchase Cost", "Total Cost", "Gross Profit", "Margin"],
        ...profitData.map((item) => [
          item.product,
          item.soldQty.toString(),
          item.salePrice.toString(),
          item.avgPurchaseCost.toString(),
          item.totalCost.toString(),
          item.grossProfit.toString(),
          item.margin,
        ]),
      ]
    } else if (reportType === "monthly") {
      csvContent = [
        ["Month", "Revenue", "Cost", "Profit"],
        ...monthlyData.map((item) => [
          item.month,
          item.revenue.toString(),
          item.cost.toString(),
          item.profit.toString(),
        ]),
      ]
    } else if (reportType === "store") {
      csvContent = [
        ["Store", "Revenue %", "Revenue Amount"],
        ...storePerformance.map((item) => [item.name, item.value.toString(), ((328000 * item.value) / 100).toString()]),
      ]
    } else if (reportType === "po-mapping") {
      csvContent = [
        ["Product", "Sold Qty", "Sale Price", "Total Cost", "Revenue", "Profit"],
        ...poMappingData.map((item) => [
          item.product,
          item.soldQty.toString(),
          item.salePrice.toString(),
          item.totalCost.toString(),
          item.revenue.toString(),
          item.profit.toString(),
        ]),
      ]
    }

    const csvString = csvContent.map((row) => row.map((field) => `"${field}"`).join(",")).join("\n")
    const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" })
    const link = document.createElement("a")
    const url = URL.createObjectURL(blob)
    link.setAttribute("href", url)
    link.setAttribute("download", `${reportType}_report_${new Date().toISOString().split("T")[0]}.csv`)
    link.style.visibility = "hidden"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const handleExportExcel = () => {
    // For Excel, we'll export as CSV with .xlsx extension (simplified approach)
    handleExportCSV()
    alert("Excel export completed! Note: File is in CSV format compatible with Excel.")
  }

  return (
    <div className="flex flex-col">
      <header className="flex h-16 shrink-0 items-center gap-2 border-b px-4">
        <SidebarTrigger className="-ml-1" />
        <div className="flex items-center gap-2">
          <h1 className="text-lg font-semibold">Profit Reports</h1>
        </div>
      </header>

      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Report Controls */}
        <Card>
          <CardHeader>
            <CardTitle>Report Configuration</CardTitle>
            <CardDescription>Configure your profit analysis parameters</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Report Type</label>
                <Select value={reportType} onValueChange={setReportType}>
                  <SelectTrigger className="w-[200px]">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="profit">Product Profit Analysis</SelectItem>
                    <SelectItem value="monthly">Monthly Performance</SelectItem>
                    <SelectItem value="store">Store Comparison</SelectItem>
                    <SelectItem value="po-mapping">PO to Sale Mapping</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Date Range</label>
                <DatePickerWithRange />
              </div>
              <div className="flex items-end space-x-2">
                <Button onClick={handleGenerateReport}>Generate Report</Button>
                <Button variant="outline" onClick={handleExportPDF}>
                  <Download className="h-4 w-4 mr-2" />
                  Export PDF
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Summary Metrics */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">$328,000</div>
              <p className="text-xs text-muted-foreground">This period</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Cost</CardTitle>
              <Package className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">$226,600</div>
              <p className="text-xs text-muted-foreground">FIFO calculated</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Gross Profit</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">$101,400</div>
              <p className="text-xs text-muted-foreground">30.9% margin</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Avg Margin</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24.9%</div>
              <p className="text-xs text-muted-foreground">Across all products</p>
            </CardContent>
          </Card>
        </div>

        {reportType === "profit" && (
          <>
            {/* Product Profit Analysis */}
            <Card>
              <CardHeader>
                <CardTitle>Product-Level Profit Analysis</CardTitle>
                <CardDescription>Detailed profit breakdown by product with FIFO costing</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Product</TableHead>
                      <TableHead>Sold Qty</TableHead>
                      <TableHead>Sale Price</TableHead>
                      <TableHead>Avg Purchase Cost</TableHead>
                      <TableHead>Total Cost</TableHead>
                      <TableHead>Gross Profit</TableHead>
                      <TableHead>Margin</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {profitData.map((item) => (
                      <TableRow key={item.product}>
                        <TableCell className="font-medium">{item.product}</TableCell>
                        <TableCell>{item.soldQty}</TableCell>
                        <TableCell>${item.salePrice}</TableCell>
                        <TableCell>${item.avgPurchaseCost}</TableCell>
                        <TableCell>${item.totalCost.toLocaleString()}</TableCell>
                        <TableCell className="text-green-600 font-medium">
                          ${item.grossProfit.toLocaleString()}
                        </TableCell>
                        <TableCell>
                          <Badge variant="secondary">{item.margin}</Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            {/* Profit Chart */}
            <Card>
              <CardHeader>
                <CardTitle>Profit Visualization</CardTitle>
                <CardDescription>Revenue vs Cost vs Profit comparison</CardDescription>
              </CardHeader>
              <CardContent>
                <ChartContainer
                  config={{
                    revenue: {
                      label: "Revenue",
                      color: "hsl(var(--chart-1))",
                    },
                    cost: {
                      label: "Cost",
                      color: "hsl(var(--chart-2))",
                    },
                    profit: {
                      label: "Profit",
                      color: "hsl(var(--chart-3))",
                    },
                  }}
                  className="h-[400px]"
                >
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={monthlyData}>
                      <XAxis dataKey="month" />
                      <YAxis />
                      <ChartTooltip content={<ChartTooltipContent />} />
                      <Bar dataKey="revenue" fill="var(--color-revenue)" />
                      <Bar dataKey="cost" fill="var(--color-cost)" />
                      <Bar dataKey="profit" fill="var(--color-profit)" />
                    </BarChart>
                  </ResponsiveContainer>
                </ChartContainer>
              </CardContent>
            </Card>
          </>
        )}

        {reportType === "po-mapping" && (
          <Card>
            <CardHeader>
              <CardTitle>PO-to-Sale Mapping</CardTitle>
              <CardDescription>Exact mapping of sales to purchase orders using FIFO method</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {poMappingData.map((item, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="font-medium">{item.product}</h4>
                      <Badge>
                        Sold: {item.soldQty} units @ ${item.salePrice}
                      </Badge>
                    </div>

                    <div className="grid gap-4 md:grid-cols-2">
                      <div>
                        <h5 className="text-sm font-medium mb-2">FIFO Cost Breakdown</h5>
                        <div className="space-y-2">
                          {item.poBreakdown.map((po, poIndex) => (
                            <div key={poIndex} className="flex justify-between text-sm">
                              <span>
                                {po.poId}: {po.qty} units @ ${po.unitCost}
                              </span>
                              <span>${po.total}</span>
                            </div>
                          ))}
                          <div className="border-t pt-2 flex justify-between font-medium">
                            <span>Total Cost:</span>
                            <span>${item.totalCost}</span>
                          </div>
                        </div>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium mb-2">Profit Calculation</h5>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span>Revenue:</span>
                            <span>${item.revenue}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Cost:</span>
                            <span>${item.totalCost}</span>
                          </div>
                          <div className="border-t pt-2 flex justify-between font-medium text-green-600">
                            <span>Gross Profit:</span>
                            <span>${item.profit}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {reportType === "store" && (
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Store Performance</CardTitle>
                <CardDescription>Revenue distribution by store</CardDescription>
              </CardHeader>
              <CardContent>
                <ChartContainer
                  config={{
                    value: {
                      label: "Revenue %",
                    },
                  }}
                  className="h-[300px]"
                >
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={storePerformance}
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, value }) => `${name}: ${value}%`}
                      >
                        {storePerformance.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <ChartTooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </ChartContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Store Metrics</CardTitle>
                <CardDescription>Detailed performance by store</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {storePerformance.map((store, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded">
                      <div className="flex items-center space-x-3">
                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: store.color }} />
                        <span className="font-medium">{store.name}</span>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">{store.value}%</p>
                        <p className="text-sm text-muted-foreground">
                          ${((328000 * store.value) / 100).toLocaleString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Export Options */}
        <Card>
          <CardHeader>
            <CardTitle>Export Options</CardTitle>
            <CardDescription>Download reports in various formats</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={handleExportCSV}>
                <FileText className="h-4 w-4 mr-2" />
                Export CSV
              </Button>
              <Button variant="outline" onClick={handleExportPDF}>
                <Download className="h-4 w-4 mr-2" />
                Export PDF
              </Button>
              <Button variant="outline" onClick={handleExportExcel}>
                <FileText className="h-4 w-4 mr-2" />
                Export Excel
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
